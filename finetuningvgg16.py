# -*- coding: utf-8 -*-
"""FineTuningVGG16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M8OY1tecQ5qp2QVpIAQpJYqe1NVBz59A
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install kaggle

import os
os.environ['KAGGLE_CONFIG_DIR'] = '/content/drive/MyDrive/kaggle'

!kaggle datasets download -d sartajbhuvaji/brain-tumor-classification-mri

import zipfile

# Define the path to your zip file
file_path = '/content/brain-tumor-classification-mri.zip'  # Replace 'your_file.zip' with your file's name

# Unzip the file to a specific destination
with zipfile.ZipFile(file_path, 'r') as zip_ref:
    zip_ref.extractall('/content/drive/MyDrive/kaggle/BrainTumorDataset')  # Replace 'destination_folder' with your desired folder

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/content/drive/MyDrive/kaggle/BrainTumorDataset'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import cv2
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tqdm import tqdm
import os
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint
from sklearn.metrics import classification_report,confusion_matrix
import ipywidgets as widgets
import io
from PIL import Image
from IPython.display import display,clear_output
from warnings import filterwarnings

labels = ['glioma_tumor' , 'no_tumor' ,'meningioma_tumor','pituitary_tumor']

import os
import cv2
from tqdm import tqdm
X_train = []
y_train = []
image_size = 150
for i in labels:
    folderPath = os.path.join('/content/drive/MyDrive/kaggle/BrainTumorDataset','Training',i)
    for j in tqdm(os.listdir(folderPath)):
        img = cv2.imread(os.path.join(folderPath,j))
        img = cv2.resize(img,(image_size, image_size))
        X_train.append(img)
        y_train.append(i)



y_train

X_train = np.array(X_train)
y_train = np.array(y_train)

import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

X_train , y_train = shuffle(X_train , y_train , random_state=101)

X_train.shape

y_train

X_train , X_test , y_train , y_test = train_test_split(X_train,y_train,test_size=0.1,random_state=101)

y_train_new = []
for i in y_train:
    y_train_new.append(labels.index(i))
y_train = y_train_new
y_train = tf.keras.utils.to_categorical(y_train)


y_test_new = []
for i in y_test:
    y_test_new.append(labels.index(i))
y_test = y_test_new
y_test = tf.keras.utils.to_categorical(y_test)

base_model = VGG16(input_shape=(150, 150, 3), include_top=False, weights='imagenet')

base_model.trainable = False

from keras.layers import GlobalAveragePooling2D,Dense , Dropout
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
x = Dropout(0.5)(x)
predictions = Dense(4, activation='softmax')(x)

from keras.models import Model
model = Model(inputs=base_model.input, outputs=predictions)

from tensorflow.keras.optimizers import SGD

model.compile(optimizer=SGD(), loss='categorical_crossentropy', metrics=['accuracy'])

from tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint, ReduceLROnPlateau

tensorboard1 = TensorBoard(log_dir='logs')
checkpoint1 = ModelCheckpoint("vgg16.keras", monitor="val_accuracy", save_best_only=True, mode="auto", verbose=2)

reduce_lr1 = ReduceLROnPlateau(monitor='val_accuracy', factor=0.4, patience=2, min_delta=0.0001, mode='auto', verbose=2)

history = model.fit(X_train, y_train, validation_split=0.4, epochs=10, batch_size=32, callbacks=[tensorboard1, checkpoint1, reduce_lr1])

training_accuracy = history.history['accuracy']
validation_accuracy = history.history['val_accuracy']

print("Last Validation Accuracy:", validation_accuracy[-1])

import matplotlib.pyplot as plt

# Plot training and validation loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Plot training and validation accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

for layer in base_model.layers[-10:]:
    layer.trainable = True

from keras.optimizers import SGD
model.compile(optimizer=SGD(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

history_fine_tune = model.fit(X_train, y_train, validation_split=0.5, epochs=10, batch_size=32)

train_loss = history_fine_tune.history['loss']
val_loss = history_fine_tune.history['val_loss']
train_accuracy = history_fine_tune.history['accuracy']
val_accuracy = history_fine_tune.history['val_accuracy']

print('Final Training Accuracy:', train_accuracy[-1])

print('Final Validation Accuracy:', val_accuracy[-1])

plt.plot(train_loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.plot(train_accuracy, label='Training Accuracy')
plt.plot(val_accuracy, label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

model.save('modelFineT.h5')

model_json = model.to_json()
with open("my_model.json", "w") as json_file:
    json_file.write(model_json)

from google.colab import files
files.download('modelFineT.h5')

